GCSA wrapper scripts for SAM output and paired-end mapping
---

This package contains scripts to
(1) transform VCF input into a GCSA index,
(2) align paired-end reads against a GCSA index, and
(3) preliminary support for seed-and-extend (for both single-end and paired-end data).

See http://www.cs.helsinki.fi/group/suds/gcsa/ for more information
and a list of publications. This package implements the experiments
given in 

Jouni Sirén, Niko Välimäki, and Veli Mäkinen: Indexing Graphs 
for Path Queries with Applications in Genome Research. Accepted to 
the IEEE IEEE/ACM Transactions on Computational Biology and 
Bioinformatics, 2014. 


First download, unpack and compile the GCSA and RLCSA packages. The following 
commands install GCSA under the 'rlcsa/gcsa' subdirectory.

   wget http://www.cs.helsinki.fi/group/suds/rlcsa/rlcsa_2013-05-20.tgz
   wget http://www.cs.helsinki.fi/group/suds/gcsa/gcsa_2013-05-20.tgz
   tar zxvf rlcsa_2013-05-20.tgz
   cd rlcsa
   make
   tar zxvf ../gcsa_2013-05-20.tgz
   cd gcsa
   make
   cd ../..

   (I would recommend you to check for the latest versions of above packages
    from http://www.cs.helsinki.fi/group/suds/gcsa/ )
  
Then you can compile the wrapper scripts as follows:

   g++ -Wall -O2 -DMASSIVE_DATA_RLCSA -DMULTITHREAD_SUPPORT -D_GLIBCXX_PARALLEL -fopenmp -Irlcsa/ -Irlcsa/gcsa/ -c -o gcsa_alignment.o gcsa_alignment.cpp
   g++ -Wall -O2 -DMASSIVE_DATA_RLCSA -DMULTITHREAD_SUPPORT -D_GLIBCXX_PARALLEL -fopenmp -o gcsa_alignment gcsa_alignment.o rlcsa/gcsa/gcsa.a rlcsa/rlcsa.a
   g++ -Wall -O2 -o materescue materescue.cpp
   g++ -Wall -O2 -o seedrescue2materescue seedrescue2materescue.cpp
   g++ -Wall -O2 -o seedrescue seedrescue.cpp
   g++ -Wall -O2 -o vcf2malignment vcf2malignment.cpp


The included scripts are (in the order they are typically used):

  vcf2malignment    
     Preprocesses VCF input into a GCSA automaton which you can then pass over to `gcsa_index`.
     Input is a VCF and FASTA files for the reference. Output is a simplified multiple alignment
     that can be processed with the tools included in gcsa package (see below for example usage
     and rlcsa/gcsa/README for more details on the tools and data formats).
     TODO: multi-sequence FASTA is not yet supported. 

  gcsa_alignment
     Align reads against a GCSA index. Input is the GCSA index itself and the reads (in text format!).
     Output is an text file that is usually post-processed using either `materescue` (paired-end data), 
     `seedrescue` (single-end seed-and-extend) or `seedrescue2materescue` (paired-end seed-and-extend).
     See below for a concrete usage example.
     TODO: Better support for FASTQ input.

  materescue
     Simple mate-rescue for paired-end data. Input is two alignment files. Output is SAM.
     TODO: Most of the SAM fields are not properly filled in. POSition and FLAGs are supported.

  seedrescue
     Preliminary support for seed-and-rescue for single-end data. Input is an alignment file. Output is SAM.
     TODO: Most of the SAM fields are not properly filled in. POSition and FLAGs are supported.

  seedrescue2materescue
     Preliminary support for seed-and-rescue for paired-end data. Input is an alignment file. Output
     needs to be post-processed by `materescue`.

Support for FASTQ input is not yet included. Use e.g. awk to preprocess the FASTQ into suitable format
 (see below for an example).


Example data, here chr 21 and the FIN subset of the 1KGP, can be downloaded and preprocessed as

   cd test
   wget ftp://ftp.ncbi.nih.gov/genomes/H_sapiens/ARCHIVE/ANNOTATION_RELEASE.105/Assembled_chromosomes/seq/hs_ref_GRCh37.p13_chr21.fa.gz
   gunzip hs_ref_GRCh37.p13_chr21.fa
   wget http://www.cs.helsinki.fi/group/gsa/1000gen-FIN-WholeGenome/1000gen-FIN-WholeGenome.vcf.gz
   gunzip 1000gen-FIN-WholeGenome.vcf.gz
   cat hs_ref_GRCh37.p13_chr21.fa | ../vcf2malignment 1000gen-FIN-WholeGenome.vcf 21 > 1000gen-FIN-chr21.malignment

Index construction for the multiple alignment is done as (see rlcsa/gcsa/README for details):

   ../../gcsa/clean_alignment 1000gen-FIN-chr21.malignment 1000gen-FIN-chr21
   rm 1000gen-FIN-chr21.malignment
   ../../gcsa/build_automaton -b 1000gen-FIN-chr21 4
   rm 1000gen-FIN-chr21
   ../../gcsa/determinize -b 1000gen-FIN-chr21.automaton 1000gen-FIN-chr21
   ../../gcsa/build_index -b 1000gen-FIN-chr21
   rm 1000gen-FIN-chr21.automaton

Note: Around 4 GB of main-memory is required for the above `build_index`.

You should now have both the GCSA index and the GCSA backbone files, that is,
1000gen-FIN-chr21.gcsa and 1000gen-FIN-chr21.backbone.


Example alignment of paired-end data:

   ../gcsa_alignment -k2 -l -i -v -r 1000gen-FIN-chr21 pattern_1.txt > al_1.txt
   ../gcsa_alignment -k2 -l -i -v -r 1000gen-FIN-chr21 pattern_2.txt > al_2.txt
   ../materescue al_1.txt al_2.txt pattern_1.txt pattern_2.txt 100 50 hs_ref_GRCh37.p13_chr21.fa > example1.sam

Note: For this toy data, the above materescue will rescue 1 pair and outputs only a handful of alignments.

Notice that e.g. FASTQ input files must be preprocessed using e.g. 

   awk 'NR%4==2{print $0}' pattern_1.fastq > pattern_1.txt

Example single-end seed-and-extend using `bash` process substitution:

   ../gcsa_alignment -k2 -l -i -v -r 1000gen-FIN-chr21 <(awk '{print substr($0,1,32)}' pattern_1.txt) > al_1.txt
   ../seedrescue al_1.txt pattern_1.txt hs_ref_GRCh37.p13_chr21.fa > example2.sam

Example paired-end seed-and-extend using `bash` process substitution:

   ../gcsa_alignment -k2 -l -i -v -r 1000gen-FIN-chr21 <(awk '{print substr($0,1,32)}' pattern_1.txt) > al_1.txt
   ../seedrescue2materescue al_1.txt pattern_1.txt hs_ref_GRCh37.p13_chr21.fa > ral_1.txt
   ../gcsa_alignment -k2 -l -i -v -r 1000gen-FIN-chr21 <(awk '{print substr($0,1,32)}' pattern_2.txt) > al_2.txt
   ../seedrescue2materescue al_2.txt pattern_2.txt hs_ref_GRCh37.p13_chr21.fa > ral_2.txt
   ../materescue ral_1.txt ral_2.txt pattern_1.txt pattern_2.txt 100 50 hs_ref_GRCh37.p13_chr21.fa > example3.sam
